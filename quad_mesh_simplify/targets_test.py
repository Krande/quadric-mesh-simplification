from targets import compute_targets, calculate_pair_attributes
import unittest
import numpy as np

class TargetsTests(unittest.TestCase):

	def test_calculate_pair_attributes(self):
		positions = np.array([
			[-1., -1., -1.],
			[-.5, 0., 0.],
			[-1., 1., 1.],
			[0., 0.25, 0.25],
			[0., -0.25, -0.25],
			[1., -1., -1.],
			[.5, 0., 0.],
			[1., 1., 1.],
			[0., -1., -1.],
			[0., 1., 1.],
		])

		Q = np.array([
      [[ 10000, -60000,  80000,  14000],
       [-60000,  85000, -10000, -50000],
       [ 80000, -10000,  15000,  53000],
       [ 14000, -50000,  53000,  15000]],
      [[ 0., 0., 0., 0.],
        [ 0., 2.,-2., 0.],
        [ 0.,-2., 2., 0.],
        [ 0., 0., 0., 0.]],
      [[ 10000, -60000,  80000,  14000],
       [-60000,  85000, -10000, -50000],
       [ 80000, -10000,  15000,  53000],
       [ 14000, -50000,  53000,  15000]],
      [[ 0., 0., 0., 0.],
        [ 0., 3.,-3., 0.],
        [ 0.,-3., 3., 0.],
        [ 0., 0., 0., 0.]],
      [[ 0., 0., 0., 0.],
        [ 0., 3.,-3., 0.],
        [ 0.,-3., 3., 0.],
        [ 0., 0., 0., 0.]],
      [[ 10000, -60000,  80000,  14000],
       [-60000,  85000, -10000, -50000],
       [ 80000, -10000,  15000,  53000],
       [ 14000, -50000,  53000,  15000]],
      [[ 0., 0., 0., 0.],
        [ 0., 2.,-2., 0.],
        [ 0.,-2., 2., 0.],
        [ 0., 0., 0., 0.]],
      [[ 10000, -60000,  80000,  14000],
       [-60000,  85000, -10000, -50000],
       [ 80000, -10000,  15000,  53000],
       [ 14000, -50000,  53000,  15000]],
      [[ 10000, -60000,  80000,  14000],
       [-60000,  85000, -10000, -50000],
       [ 80000, -10000,  15000,  53000],
       [ 14000, -50000,  53000,  15000]],
      [[ 10000, -60000,  80000,  14000],
       [-60000,  85000, -10000, -50000],
       [ 80000, -10000,  15000,  53000],
       [ 14000, -50000,  53000,  15000]],
		])

		solution_err = 0.
		solution_target = [0., 0.25, 0.25]

		p = np.zeros((6), dtype=np.double)
		calculate_pair_attributes(1, 3, positions, Q, None, p)

		self.assertEqual(p[0], solution_err)
		self.assertEqual(p[1], 1) #v1
		self.assertEqual(p[2], 3) #v2
		np.testing.assert_equal(p[3:], solution_target)
	


	def test_compute_targets(self):
		positions = np.array([
			[0., 0., 0.],
			[1., 0., 0.],
			[1., 1., 0.],
			[1., 1., 1.],
			[1., 0., 1.],
		])

		Q = np.array([
			[[2., 2., 2., 2.],
			 [2., 2., 2., 2.],
			 [2., 2., 2., 2.],
			 [2., 2., 2., 2.]],
			[[1., 1., 1., 1.],
			 [1., 1., 1., 1.],
			 [1., 1., 1., 1.],
			 [1., 1., 1., 1.]],
			[[2., 2., 2., 2.],
			 [2., 2., 2., 2.],
			 [2., 2., 2., 2.],
			 [2., 2., 2., 2.]],
			[[1., 1., 1., 1.],
			 [1., 1., 1., 1.],
			 [1., 1., 1., 1.],
			 [1., 1., 1., 1.]],
		])

		valid_pairs = np.array([
			[0, 1],
			[1, 2],
		])

		solution = np.array([
			# err, v1, v2, target
			[3., 0., 1., 0., 0., 0.],
			[12., 1., 2., 1., 0., 0.],
		])

		res = compute_targets(positions, Q, valid_pairs, None)

		np.testing.assert_equal(res, solution)

	def test_compute_targets_with_features(self):
		positions = np.array([
			[0., 0., 0.],
			[1., 0., 0.],
			[1., 1., 0.],
			[1., 1., 1.],
			[1., 0., 1.],
		])

		Q = np.array([
			[[2., 2., 2., 2.],
			 [2., 2., 2., 2.],
			 [2., 2., 2., 2.],
			 [2., 2., 2., 2.]],
			[[1., 1., 1., 1.],
			 [1., 1., 1., 1.],
			 [1., 1., 1., 1.],
			 [1., 1., 1., 1.]],
			[[2., 2., 2., 2.],
			 [2., 2., 2., 2.],
			 [2., 2., 2., 2.],
			 [2., 2., 2., 2.]],
			[[1., 1., 1., 1.],
			 [1., 1., 1., 1.],
			 [1., 1., 1., 1.],
			 [1., 1., 1., 1.]],
		])

		valid_pairs = np.array([
			[0, 1],
			[1, 2],
		])

		features = np.ones((5,1))

		solution = np.array([
			# err, v1, v2, target, features
			[3., 0., 1., 0., 0., 0., 1.],
			[12., 1., 2., 1., 0., 0., 1.],
		])

		res = compute_targets(positions, Q, valid_pairs, features)

		np.testing.assert_equal(res, solution)

if __name__ == '__main__':
	unittest.main()